// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client"
  output          = "./generated/prisma"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Quiz {
  id        Int           @id @default(autoincrement())
  title     String
  quizData  Json
  tags      String[]
  attempts  QuizAttempt[]
  createdAt DateTime      @default(now())
}

// NextAuth Account model
model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  name          String?
  password      String?
  emailVerified DateTime?
  image         String?
  quizAttempts  QuizAttempt[]
  accounts      Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model QuizAttempt {
  id          Int      @id @default(autoincrement())
  score       Float
  totalScore  Float    @default(10)
  userId      Int
  quizId      Int
  completedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@unique([userId, quizId, completedAt])
  @@index([userId])
  @@index([quizId])
}

//  For email verification or password reset
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
