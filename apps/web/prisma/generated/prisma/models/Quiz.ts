
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Quiz` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Quiz
 * 
 */
export type QuizModel = runtime.Types.Result.DefaultSelection<Prisma.$QuizPayload>

export type AggregateQuiz = {
  _count: QuizCountAggregateOutputType | null
  _avg: QuizAvgAggregateOutputType | null
  _sum: QuizSumAggregateOutputType | null
  _min: QuizMinAggregateOutputType | null
  _max: QuizMaxAggregateOutputType | null
}

export type QuizAvgAggregateOutputType = {
  id: number | null
}

export type QuizSumAggregateOutputType = {
  id: number | null
}

export type QuizMinAggregateOutputType = {
  id: number | null
  title: string | null
  createdAt: Date | null
}

export type QuizMaxAggregateOutputType = {
  id: number | null
  title: string | null
  createdAt: Date | null
}

export type QuizCountAggregateOutputType = {
  id: number
  title: number
  quizData: number
  tags: number
  createdAt: number
  _all: number
}


export type QuizAvgAggregateInputType = {
  id?: true
}

export type QuizSumAggregateInputType = {
  id?: true
}

export type QuizMinAggregateInputType = {
  id?: true
  title?: true
  createdAt?: true
}

export type QuizMaxAggregateInputType = {
  id?: true
  title?: true
  createdAt?: true
}

export type QuizCountAggregateInputType = {
  id?: true
  title?: true
  quizData?: true
  tags?: true
  createdAt?: true
  _all?: true
}

export type QuizAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Quiz to aggregate.
   */
  where?: Prisma.QuizWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Quizzes to fetch.
   */
  orderBy?: Prisma.QuizOrderByWithRelationInput | Prisma.QuizOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.QuizWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Quizzes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Quizzes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Quizzes
  **/
  _count?: true | QuizCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: QuizAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: QuizSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: QuizMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: QuizMaxAggregateInputType
}

export type GetQuizAggregateType<T extends QuizAggregateArgs> = {
      [P in keyof T & keyof AggregateQuiz]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateQuiz[P]>
    : Prisma.GetScalarType<T[P], AggregateQuiz[P]>
}




export type QuizGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.QuizWhereInput
  orderBy?: Prisma.QuizOrderByWithAggregationInput | Prisma.QuizOrderByWithAggregationInput[]
  by: Prisma.QuizScalarFieldEnum[] | Prisma.QuizScalarFieldEnum
  having?: Prisma.QuizScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: QuizCountAggregateInputType | true
  _avg?: QuizAvgAggregateInputType
  _sum?: QuizSumAggregateInputType
  _min?: QuizMinAggregateInputType
  _max?: QuizMaxAggregateInputType
}

export type QuizGroupByOutputType = {
  id: number
  title: string
  quizData: runtime.JsonValue
  tags: string[]
  createdAt: Date
  _count: QuizCountAggregateOutputType | null
  _avg: QuizAvgAggregateOutputType | null
  _sum: QuizSumAggregateOutputType | null
  _min: QuizMinAggregateOutputType | null
  _max: QuizMaxAggregateOutputType | null
}

type GetQuizGroupByPayload<T extends QuizGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<QuizGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof QuizGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], QuizGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], QuizGroupByOutputType[P]>
      }
    >
  >



export type QuizWhereInput = {
  AND?: Prisma.QuizWhereInput | Prisma.QuizWhereInput[]
  OR?: Prisma.QuizWhereInput[]
  NOT?: Prisma.QuizWhereInput | Prisma.QuizWhereInput[]
  id?: Prisma.IntFilter<"Quiz"> | number
  title?: Prisma.StringFilter<"Quiz"> | string
  quizData?: Prisma.JsonFilter<"Quiz">
  tags?: Prisma.StringNullableListFilter<"Quiz">
  createdAt?: Prisma.DateTimeFilter<"Quiz"> | Date | string
  attempts?: Prisma.QuizAttemptListRelationFilter
}

export type QuizOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  quizData?: Prisma.SortOrder
  tags?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  attempts?: Prisma.QuizAttemptOrderByRelationAggregateInput
  _relevance?: Prisma.QuizOrderByRelevanceInput
}

export type QuizWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.QuizWhereInput | Prisma.QuizWhereInput[]
  OR?: Prisma.QuizWhereInput[]
  NOT?: Prisma.QuizWhereInput | Prisma.QuizWhereInput[]
  title?: Prisma.StringFilter<"Quiz"> | string
  quizData?: Prisma.JsonFilter<"Quiz">
  tags?: Prisma.StringNullableListFilter<"Quiz">
  createdAt?: Prisma.DateTimeFilter<"Quiz"> | Date | string
  attempts?: Prisma.QuizAttemptListRelationFilter
}, "id">

export type QuizOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  quizData?: Prisma.SortOrder
  tags?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.QuizCountOrderByAggregateInput
  _avg?: Prisma.QuizAvgOrderByAggregateInput
  _max?: Prisma.QuizMaxOrderByAggregateInput
  _min?: Prisma.QuizMinOrderByAggregateInput
  _sum?: Prisma.QuizSumOrderByAggregateInput
}

export type QuizScalarWhereWithAggregatesInput = {
  AND?: Prisma.QuizScalarWhereWithAggregatesInput | Prisma.QuizScalarWhereWithAggregatesInput[]
  OR?: Prisma.QuizScalarWhereWithAggregatesInput[]
  NOT?: Prisma.QuizScalarWhereWithAggregatesInput | Prisma.QuizScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Quiz"> | number
  title?: Prisma.StringWithAggregatesFilter<"Quiz"> | string
  quizData?: Prisma.JsonWithAggregatesFilter<"Quiz">
  tags?: Prisma.StringNullableListFilter<"Quiz">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Quiz"> | Date | string
}

export type QuizCreateInput = {
  title: string
  quizData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  tags?: Prisma.QuizCreatetagsInput | string[]
  createdAt?: Date | string
  attempts?: Prisma.QuizAttemptCreateNestedManyWithoutQuizInput
}

export type QuizUncheckedCreateInput = {
  id?: number
  title: string
  quizData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  tags?: Prisma.QuizCreatetagsInput | string[]
  createdAt?: Date | string
  attempts?: Prisma.QuizAttemptUncheckedCreateNestedManyWithoutQuizInput
}

export type QuizUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  quizData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  tags?: Prisma.QuizUpdatetagsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  attempts?: Prisma.QuizAttemptUpdateManyWithoutQuizNestedInput
}

export type QuizUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  quizData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  tags?: Prisma.QuizUpdatetagsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  attempts?: Prisma.QuizAttemptUncheckedUpdateManyWithoutQuizNestedInput
}

export type QuizCreateManyInput = {
  id?: number
  title: string
  quizData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  tags?: Prisma.QuizCreatetagsInput | string[]
  createdAt?: Date | string
}

export type QuizUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  quizData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  tags?: Prisma.QuizUpdatetagsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type QuizUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  quizData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  tags?: Prisma.QuizUpdatetagsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StringNullableListFilter<$PrismaModel = never> = {
  equals?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel> | null
  has?: string | Prisma.StringFieldRefInput<$PrismaModel> | null
  hasEvery?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  hasSome?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type QuizOrderByRelevanceInput = {
  fields: Prisma.QuizOrderByRelevanceFieldEnum | Prisma.QuizOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type QuizCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  quizData?: Prisma.SortOrder
  tags?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type QuizAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type QuizMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type QuizMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type QuizSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type QuizScalarRelationFilter = {
  is?: Prisma.QuizWhereInput
  isNot?: Prisma.QuizWhereInput
}

export type QuizCreatetagsInput = {
  set: string[]
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type QuizUpdatetagsInput = {
  set?: string[]
  push?: string | string[]
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type QuizCreateNestedOneWithoutAttemptsInput = {
  create?: Prisma.XOR<Prisma.QuizCreateWithoutAttemptsInput, Prisma.QuizUncheckedCreateWithoutAttemptsInput>
  connectOrCreate?: Prisma.QuizCreateOrConnectWithoutAttemptsInput
  connect?: Prisma.QuizWhereUniqueInput
}

export type QuizUpdateOneRequiredWithoutAttemptsNestedInput = {
  create?: Prisma.XOR<Prisma.QuizCreateWithoutAttemptsInput, Prisma.QuizUncheckedCreateWithoutAttemptsInput>
  connectOrCreate?: Prisma.QuizCreateOrConnectWithoutAttemptsInput
  upsert?: Prisma.QuizUpsertWithoutAttemptsInput
  connect?: Prisma.QuizWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.QuizUpdateToOneWithWhereWithoutAttemptsInput, Prisma.QuizUpdateWithoutAttemptsInput>, Prisma.QuizUncheckedUpdateWithoutAttemptsInput>
}

export type QuizCreateWithoutAttemptsInput = {
  title: string
  quizData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  tags?: Prisma.QuizCreatetagsInput | string[]
  createdAt?: Date | string
}

export type QuizUncheckedCreateWithoutAttemptsInput = {
  id?: number
  title: string
  quizData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  tags?: Prisma.QuizCreatetagsInput | string[]
  createdAt?: Date | string
}

export type QuizCreateOrConnectWithoutAttemptsInput = {
  where: Prisma.QuizWhereUniqueInput
  create: Prisma.XOR<Prisma.QuizCreateWithoutAttemptsInput, Prisma.QuizUncheckedCreateWithoutAttemptsInput>
}

export type QuizUpsertWithoutAttemptsInput = {
  update: Prisma.XOR<Prisma.QuizUpdateWithoutAttemptsInput, Prisma.QuizUncheckedUpdateWithoutAttemptsInput>
  create: Prisma.XOR<Prisma.QuizCreateWithoutAttemptsInput, Prisma.QuizUncheckedCreateWithoutAttemptsInput>
  where?: Prisma.QuizWhereInput
}

export type QuizUpdateToOneWithWhereWithoutAttemptsInput = {
  where?: Prisma.QuizWhereInput
  data: Prisma.XOR<Prisma.QuizUpdateWithoutAttemptsInput, Prisma.QuizUncheckedUpdateWithoutAttemptsInput>
}

export type QuizUpdateWithoutAttemptsInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  quizData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  tags?: Prisma.QuizUpdatetagsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type QuizUncheckedUpdateWithoutAttemptsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  quizData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  tags?: Prisma.QuizUpdatetagsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type QuizCountOutputType
 */

export type QuizCountOutputType = {
  attempts: number
}

export type QuizCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  attempts?: boolean | QuizCountOutputTypeCountAttemptsArgs
}

/**
 * QuizCountOutputType without action
 */
export type QuizCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuizCountOutputType
   */
  select?: Prisma.QuizCountOutputTypeSelect<ExtArgs> | null
}

/**
 * QuizCountOutputType without action
 */
export type QuizCountOutputTypeCountAttemptsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.QuizAttemptWhereInput
}


export type QuizSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  quizData?: boolean
  tags?: boolean
  createdAt?: boolean
  attempts?: boolean | Prisma.Quiz$attemptsArgs<ExtArgs>
  _count?: boolean | Prisma.QuizCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["quiz"]>

export type QuizSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  quizData?: boolean
  tags?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["quiz"]>

export type QuizSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  quizData?: boolean
  tags?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["quiz"]>

export type QuizSelectScalar = {
  id?: boolean
  title?: boolean
  quizData?: boolean
  tags?: boolean
  createdAt?: boolean
}

export type QuizOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "quizData" | "tags" | "createdAt", ExtArgs["result"]["quiz"]>
export type QuizInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  attempts?: boolean | Prisma.Quiz$attemptsArgs<ExtArgs>
  _count?: boolean | Prisma.QuizCountOutputTypeDefaultArgs<ExtArgs>
}
export type QuizIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type QuizIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $QuizPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Quiz"
  objects: {
    attempts: Prisma.$QuizAttemptPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    title: string
    quizData: runtime.JsonValue
    tags: string[]
    createdAt: Date
  }, ExtArgs["result"]["quiz"]>
  composites: {}
}

export type QuizGetPayload<S extends boolean | null | undefined | QuizDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$QuizPayload, S>

export type QuizCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<QuizFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: QuizCountAggregateInputType | true
  }

export interface QuizDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Quiz'], meta: { name: 'Quiz' } }
  /**
   * Find zero or one Quiz that matches the filter.
   * @param {QuizFindUniqueArgs} args - Arguments to find a Quiz
   * @example
   * // Get one Quiz
   * const quiz = await prisma.quiz.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends QuizFindUniqueArgs>(args: Prisma.SelectSubset<T, QuizFindUniqueArgs<ExtArgs>>): Prisma.Prisma__QuizClient<runtime.Types.Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Quiz that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {QuizFindUniqueOrThrowArgs} args - Arguments to find a Quiz
   * @example
   * // Get one Quiz
   * const quiz = await prisma.quiz.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends QuizFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, QuizFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__QuizClient<runtime.Types.Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Quiz that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuizFindFirstArgs} args - Arguments to find a Quiz
   * @example
   * // Get one Quiz
   * const quiz = await prisma.quiz.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends QuizFindFirstArgs>(args?: Prisma.SelectSubset<T, QuizFindFirstArgs<ExtArgs>>): Prisma.Prisma__QuizClient<runtime.Types.Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Quiz that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuizFindFirstOrThrowArgs} args - Arguments to find a Quiz
   * @example
   * // Get one Quiz
   * const quiz = await prisma.quiz.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends QuizFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, QuizFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__QuizClient<runtime.Types.Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Quizzes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuizFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Quizzes
   * const quizzes = await prisma.quiz.findMany()
   * 
   * // Get first 10 Quizzes
   * const quizzes = await prisma.quiz.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const quizWithIdOnly = await prisma.quiz.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends QuizFindManyArgs>(args?: Prisma.SelectSubset<T, QuizFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Quiz.
   * @param {QuizCreateArgs} args - Arguments to create a Quiz.
   * @example
   * // Create one Quiz
   * const Quiz = await prisma.quiz.create({
   *   data: {
   *     // ... data to create a Quiz
   *   }
   * })
   * 
   */
  create<T extends QuizCreateArgs>(args: Prisma.SelectSubset<T, QuizCreateArgs<ExtArgs>>): Prisma.Prisma__QuizClient<runtime.Types.Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Quizzes.
   * @param {QuizCreateManyArgs} args - Arguments to create many Quizzes.
   * @example
   * // Create many Quizzes
   * const quiz = await prisma.quiz.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends QuizCreateManyArgs>(args?: Prisma.SelectSubset<T, QuizCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Quizzes and returns the data saved in the database.
   * @param {QuizCreateManyAndReturnArgs} args - Arguments to create many Quizzes.
   * @example
   * // Create many Quizzes
   * const quiz = await prisma.quiz.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Quizzes and only return the `id`
   * const quizWithIdOnly = await prisma.quiz.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends QuizCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, QuizCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Quiz.
   * @param {QuizDeleteArgs} args - Arguments to delete one Quiz.
   * @example
   * // Delete one Quiz
   * const Quiz = await prisma.quiz.delete({
   *   where: {
   *     // ... filter to delete one Quiz
   *   }
   * })
   * 
   */
  delete<T extends QuizDeleteArgs>(args: Prisma.SelectSubset<T, QuizDeleteArgs<ExtArgs>>): Prisma.Prisma__QuizClient<runtime.Types.Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Quiz.
   * @param {QuizUpdateArgs} args - Arguments to update one Quiz.
   * @example
   * // Update one Quiz
   * const quiz = await prisma.quiz.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends QuizUpdateArgs>(args: Prisma.SelectSubset<T, QuizUpdateArgs<ExtArgs>>): Prisma.Prisma__QuizClient<runtime.Types.Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Quizzes.
   * @param {QuizDeleteManyArgs} args - Arguments to filter Quizzes to delete.
   * @example
   * // Delete a few Quizzes
   * const { count } = await prisma.quiz.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends QuizDeleteManyArgs>(args?: Prisma.SelectSubset<T, QuizDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Quizzes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuizUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Quizzes
   * const quiz = await prisma.quiz.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends QuizUpdateManyArgs>(args: Prisma.SelectSubset<T, QuizUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Quizzes and returns the data updated in the database.
   * @param {QuizUpdateManyAndReturnArgs} args - Arguments to update many Quizzes.
   * @example
   * // Update many Quizzes
   * const quiz = await prisma.quiz.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Quizzes and only return the `id`
   * const quizWithIdOnly = await prisma.quiz.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends QuizUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, QuizUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Quiz.
   * @param {QuizUpsertArgs} args - Arguments to update or create a Quiz.
   * @example
   * // Update or create a Quiz
   * const quiz = await prisma.quiz.upsert({
   *   create: {
   *     // ... data to create a Quiz
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Quiz we want to update
   *   }
   * })
   */
  upsert<T extends QuizUpsertArgs>(args: Prisma.SelectSubset<T, QuizUpsertArgs<ExtArgs>>): Prisma.Prisma__QuizClient<runtime.Types.Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Quizzes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuizCountArgs} args - Arguments to filter Quizzes to count.
   * @example
   * // Count the number of Quizzes
   * const count = await prisma.quiz.count({
   *   where: {
   *     // ... the filter for the Quizzes we want to count
   *   }
   * })
  **/
  count<T extends QuizCountArgs>(
    args?: Prisma.Subset<T, QuizCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], QuizCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Quiz.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuizAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends QuizAggregateArgs>(args: Prisma.Subset<T, QuizAggregateArgs>): Prisma.PrismaPromise<GetQuizAggregateType<T>>

  /**
   * Group by Quiz.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuizGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends QuizGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: QuizGroupByArgs['orderBy'] }
      : { orderBy?: QuizGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, QuizGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuizGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Quiz model
 */
readonly fields: QuizFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Quiz.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__QuizClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  attempts<T extends Prisma.Quiz$attemptsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Quiz$attemptsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$QuizAttemptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Quiz model
 */
export interface QuizFieldRefs {
  readonly id: Prisma.FieldRef<"Quiz", 'Int'>
  readonly title: Prisma.FieldRef<"Quiz", 'String'>
  readonly quizData: Prisma.FieldRef<"Quiz", 'Json'>
  readonly tags: Prisma.FieldRef<"Quiz", 'String[]'>
  readonly createdAt: Prisma.FieldRef<"Quiz", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Quiz findUnique
 */
export type QuizFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Quiz
   */
  select?: Prisma.QuizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Quiz
   */
  omit?: Prisma.QuizOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizInclude<ExtArgs> | null
  /**
   * Filter, which Quiz to fetch.
   */
  where: Prisma.QuizWhereUniqueInput
}

/**
 * Quiz findUniqueOrThrow
 */
export type QuizFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Quiz
   */
  select?: Prisma.QuizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Quiz
   */
  omit?: Prisma.QuizOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizInclude<ExtArgs> | null
  /**
   * Filter, which Quiz to fetch.
   */
  where: Prisma.QuizWhereUniqueInput
}

/**
 * Quiz findFirst
 */
export type QuizFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Quiz
   */
  select?: Prisma.QuizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Quiz
   */
  omit?: Prisma.QuizOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizInclude<ExtArgs> | null
  /**
   * Filter, which Quiz to fetch.
   */
  where?: Prisma.QuizWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Quizzes to fetch.
   */
  orderBy?: Prisma.QuizOrderByWithRelationInput | Prisma.QuizOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Quizzes.
   */
  cursor?: Prisma.QuizWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Quizzes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Quizzes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Quizzes.
   */
  distinct?: Prisma.QuizScalarFieldEnum | Prisma.QuizScalarFieldEnum[]
}

/**
 * Quiz findFirstOrThrow
 */
export type QuizFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Quiz
   */
  select?: Prisma.QuizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Quiz
   */
  omit?: Prisma.QuizOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizInclude<ExtArgs> | null
  /**
   * Filter, which Quiz to fetch.
   */
  where?: Prisma.QuizWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Quizzes to fetch.
   */
  orderBy?: Prisma.QuizOrderByWithRelationInput | Prisma.QuizOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Quizzes.
   */
  cursor?: Prisma.QuizWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Quizzes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Quizzes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Quizzes.
   */
  distinct?: Prisma.QuizScalarFieldEnum | Prisma.QuizScalarFieldEnum[]
}

/**
 * Quiz findMany
 */
export type QuizFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Quiz
   */
  select?: Prisma.QuizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Quiz
   */
  omit?: Prisma.QuizOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizInclude<ExtArgs> | null
  /**
   * Filter, which Quizzes to fetch.
   */
  where?: Prisma.QuizWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Quizzes to fetch.
   */
  orderBy?: Prisma.QuizOrderByWithRelationInput | Prisma.QuizOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Quizzes.
   */
  cursor?: Prisma.QuizWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Quizzes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Quizzes.
   */
  skip?: number
  distinct?: Prisma.QuizScalarFieldEnum | Prisma.QuizScalarFieldEnum[]
}

/**
 * Quiz create
 */
export type QuizCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Quiz
   */
  select?: Prisma.QuizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Quiz
   */
  omit?: Prisma.QuizOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizInclude<ExtArgs> | null
  /**
   * The data needed to create a Quiz.
   */
  data: Prisma.XOR<Prisma.QuizCreateInput, Prisma.QuizUncheckedCreateInput>
}

/**
 * Quiz createMany
 */
export type QuizCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Quizzes.
   */
  data: Prisma.QuizCreateManyInput | Prisma.QuizCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Quiz createManyAndReturn
 */
export type QuizCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Quiz
   */
  select?: Prisma.QuizSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Quiz
   */
  omit?: Prisma.QuizOmit<ExtArgs> | null
  /**
   * The data used to create many Quizzes.
   */
  data: Prisma.QuizCreateManyInput | Prisma.QuizCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Quiz update
 */
export type QuizUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Quiz
   */
  select?: Prisma.QuizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Quiz
   */
  omit?: Prisma.QuizOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizInclude<ExtArgs> | null
  /**
   * The data needed to update a Quiz.
   */
  data: Prisma.XOR<Prisma.QuizUpdateInput, Prisma.QuizUncheckedUpdateInput>
  /**
   * Choose, which Quiz to update.
   */
  where: Prisma.QuizWhereUniqueInput
}

/**
 * Quiz updateMany
 */
export type QuizUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Quizzes.
   */
  data: Prisma.XOR<Prisma.QuizUpdateManyMutationInput, Prisma.QuizUncheckedUpdateManyInput>
  /**
   * Filter which Quizzes to update
   */
  where?: Prisma.QuizWhereInput
  /**
   * Limit how many Quizzes to update.
   */
  limit?: number
}

/**
 * Quiz updateManyAndReturn
 */
export type QuizUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Quiz
   */
  select?: Prisma.QuizSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Quiz
   */
  omit?: Prisma.QuizOmit<ExtArgs> | null
  /**
   * The data used to update Quizzes.
   */
  data: Prisma.XOR<Prisma.QuizUpdateManyMutationInput, Prisma.QuizUncheckedUpdateManyInput>
  /**
   * Filter which Quizzes to update
   */
  where?: Prisma.QuizWhereInput
  /**
   * Limit how many Quizzes to update.
   */
  limit?: number
}

/**
 * Quiz upsert
 */
export type QuizUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Quiz
   */
  select?: Prisma.QuizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Quiz
   */
  omit?: Prisma.QuizOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizInclude<ExtArgs> | null
  /**
   * The filter to search for the Quiz to update in case it exists.
   */
  where: Prisma.QuizWhereUniqueInput
  /**
   * In case the Quiz found by the `where` argument doesn't exist, create a new Quiz with this data.
   */
  create: Prisma.XOR<Prisma.QuizCreateInput, Prisma.QuizUncheckedCreateInput>
  /**
   * In case the Quiz was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.QuizUpdateInput, Prisma.QuizUncheckedUpdateInput>
}

/**
 * Quiz delete
 */
export type QuizDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Quiz
   */
  select?: Prisma.QuizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Quiz
   */
  omit?: Prisma.QuizOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizInclude<ExtArgs> | null
  /**
   * Filter which Quiz to delete.
   */
  where: Prisma.QuizWhereUniqueInput
}

/**
 * Quiz deleteMany
 */
export type QuizDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Quizzes to delete
   */
  where?: Prisma.QuizWhereInput
  /**
   * Limit how many Quizzes to delete.
   */
  limit?: number
}

/**
 * Quiz.attempts
 */
export type Quiz$attemptsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuizAttempt
   */
  select?: Prisma.QuizAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QuizAttempt
   */
  omit?: Prisma.QuizAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizAttemptInclude<ExtArgs> | null
  where?: Prisma.QuizAttemptWhereInput
  orderBy?: Prisma.QuizAttemptOrderByWithRelationInput | Prisma.QuizAttemptOrderByWithRelationInput[]
  cursor?: Prisma.QuizAttemptWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.QuizAttemptScalarFieldEnum | Prisma.QuizAttemptScalarFieldEnum[]
}

/**
 * Quiz without action
 */
export type QuizDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Quiz
   */
  select?: Prisma.QuizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Quiz
   */
  omit?: Prisma.QuizOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizInclude<ExtArgs> | null
}
