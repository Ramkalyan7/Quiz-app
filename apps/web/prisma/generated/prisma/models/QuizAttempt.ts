
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `QuizAttempt` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model QuizAttempt
 * 
 */
export type QuizAttemptModel = runtime.Types.Result.DefaultSelection<Prisma.$QuizAttemptPayload>

export type AggregateQuizAttempt = {
  _count: QuizAttemptCountAggregateOutputType | null
  _avg: QuizAttemptAvgAggregateOutputType | null
  _sum: QuizAttemptSumAggregateOutputType | null
  _min: QuizAttemptMinAggregateOutputType | null
  _max: QuizAttemptMaxAggregateOutputType | null
}

export type QuizAttemptAvgAggregateOutputType = {
  id: number | null
  score: number | null
  totalScore: number | null
  userId: number | null
  quizId: number | null
}

export type QuizAttemptSumAggregateOutputType = {
  id: number | null
  score: number | null
  totalScore: number | null
  userId: number | null
  quizId: number | null
}

export type QuizAttemptMinAggregateOutputType = {
  id: number | null
  score: number | null
  totalScore: number | null
  userId: number | null
  quizId: number | null
  completedAt: Date | null
}

export type QuizAttemptMaxAggregateOutputType = {
  id: number | null
  score: number | null
  totalScore: number | null
  userId: number | null
  quizId: number | null
  completedAt: Date | null
}

export type QuizAttemptCountAggregateOutputType = {
  id: number
  score: number
  totalScore: number
  userId: number
  quizId: number
  completedAt: number
  _all: number
}


export type QuizAttemptAvgAggregateInputType = {
  id?: true
  score?: true
  totalScore?: true
  userId?: true
  quizId?: true
}

export type QuizAttemptSumAggregateInputType = {
  id?: true
  score?: true
  totalScore?: true
  userId?: true
  quizId?: true
}

export type QuizAttemptMinAggregateInputType = {
  id?: true
  score?: true
  totalScore?: true
  userId?: true
  quizId?: true
  completedAt?: true
}

export type QuizAttemptMaxAggregateInputType = {
  id?: true
  score?: true
  totalScore?: true
  userId?: true
  quizId?: true
  completedAt?: true
}

export type QuizAttemptCountAggregateInputType = {
  id?: true
  score?: true
  totalScore?: true
  userId?: true
  quizId?: true
  completedAt?: true
  _all?: true
}

export type QuizAttemptAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which QuizAttempt to aggregate.
   */
  where?: Prisma.QuizAttemptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of QuizAttempts to fetch.
   */
  orderBy?: Prisma.QuizAttemptOrderByWithRelationInput | Prisma.QuizAttemptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.QuizAttemptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` QuizAttempts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` QuizAttempts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned QuizAttempts
  **/
  _count?: true | QuizAttemptCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: QuizAttemptAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: QuizAttemptSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: QuizAttemptMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: QuizAttemptMaxAggregateInputType
}

export type GetQuizAttemptAggregateType<T extends QuizAttemptAggregateArgs> = {
      [P in keyof T & keyof AggregateQuizAttempt]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateQuizAttempt[P]>
    : Prisma.GetScalarType<T[P], AggregateQuizAttempt[P]>
}




export type QuizAttemptGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.QuizAttemptWhereInput
  orderBy?: Prisma.QuizAttemptOrderByWithAggregationInput | Prisma.QuizAttemptOrderByWithAggregationInput[]
  by: Prisma.QuizAttemptScalarFieldEnum[] | Prisma.QuizAttemptScalarFieldEnum
  having?: Prisma.QuizAttemptScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: QuizAttemptCountAggregateInputType | true
  _avg?: QuizAttemptAvgAggregateInputType
  _sum?: QuizAttemptSumAggregateInputType
  _min?: QuizAttemptMinAggregateInputType
  _max?: QuizAttemptMaxAggregateInputType
}

export type QuizAttemptGroupByOutputType = {
  id: number
  score: number
  totalScore: number
  userId: number
  quizId: number
  completedAt: Date
  _count: QuizAttemptCountAggregateOutputType | null
  _avg: QuizAttemptAvgAggregateOutputType | null
  _sum: QuizAttemptSumAggregateOutputType | null
  _min: QuizAttemptMinAggregateOutputType | null
  _max: QuizAttemptMaxAggregateOutputType | null
}

type GetQuizAttemptGroupByPayload<T extends QuizAttemptGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<QuizAttemptGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof QuizAttemptGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], QuizAttemptGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], QuizAttemptGroupByOutputType[P]>
      }
    >
  >



export type QuizAttemptWhereInput = {
  AND?: Prisma.QuizAttemptWhereInput | Prisma.QuizAttemptWhereInput[]
  OR?: Prisma.QuizAttemptWhereInput[]
  NOT?: Prisma.QuizAttemptWhereInput | Prisma.QuizAttemptWhereInput[]
  id?: Prisma.IntFilter<"QuizAttempt"> | number
  score?: Prisma.FloatFilter<"QuizAttempt"> | number
  totalScore?: Prisma.FloatFilter<"QuizAttempt"> | number
  userId?: Prisma.IntFilter<"QuizAttempt"> | number
  quizId?: Prisma.IntFilter<"QuizAttempt"> | number
  completedAt?: Prisma.DateTimeFilter<"QuizAttempt"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  quiz?: Prisma.XOR<Prisma.QuizScalarRelationFilter, Prisma.QuizWhereInput>
}

export type QuizAttemptOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  score?: Prisma.SortOrder
  totalScore?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  quiz?: Prisma.QuizOrderByWithRelationInput
}

export type QuizAttemptWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  userId_quizId_completedAt?: Prisma.QuizAttemptUserIdQuizIdCompletedAtCompoundUniqueInput
  AND?: Prisma.QuizAttemptWhereInput | Prisma.QuizAttemptWhereInput[]
  OR?: Prisma.QuizAttemptWhereInput[]
  NOT?: Prisma.QuizAttemptWhereInput | Prisma.QuizAttemptWhereInput[]
  score?: Prisma.FloatFilter<"QuizAttempt"> | number
  totalScore?: Prisma.FloatFilter<"QuizAttempt"> | number
  userId?: Prisma.IntFilter<"QuizAttempt"> | number
  quizId?: Prisma.IntFilter<"QuizAttempt"> | number
  completedAt?: Prisma.DateTimeFilter<"QuizAttempt"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  quiz?: Prisma.XOR<Prisma.QuizScalarRelationFilter, Prisma.QuizWhereInput>
}, "id" | "userId_quizId_completedAt">

export type QuizAttemptOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  score?: Prisma.SortOrder
  totalScore?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
  _count?: Prisma.QuizAttemptCountOrderByAggregateInput
  _avg?: Prisma.QuizAttemptAvgOrderByAggregateInput
  _max?: Prisma.QuizAttemptMaxOrderByAggregateInput
  _min?: Prisma.QuizAttemptMinOrderByAggregateInput
  _sum?: Prisma.QuizAttemptSumOrderByAggregateInput
}

export type QuizAttemptScalarWhereWithAggregatesInput = {
  AND?: Prisma.QuizAttemptScalarWhereWithAggregatesInput | Prisma.QuizAttemptScalarWhereWithAggregatesInput[]
  OR?: Prisma.QuizAttemptScalarWhereWithAggregatesInput[]
  NOT?: Prisma.QuizAttemptScalarWhereWithAggregatesInput | Prisma.QuizAttemptScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"QuizAttempt"> | number
  score?: Prisma.FloatWithAggregatesFilter<"QuizAttempt"> | number
  totalScore?: Prisma.FloatWithAggregatesFilter<"QuizAttempt"> | number
  userId?: Prisma.IntWithAggregatesFilter<"QuizAttempt"> | number
  quizId?: Prisma.IntWithAggregatesFilter<"QuizAttempt"> | number
  completedAt?: Prisma.DateTimeWithAggregatesFilter<"QuizAttempt"> | Date | string
}

export type QuizAttemptCreateInput = {
  score: number
  totalScore?: number
  completedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutQuizAttemptsInput
  quiz: Prisma.QuizCreateNestedOneWithoutAttemptsInput
}

export type QuizAttemptUncheckedCreateInput = {
  id?: number
  score: number
  totalScore?: number
  userId: number
  quizId: number
  completedAt?: Date | string
}

export type QuizAttemptUpdateInput = {
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  totalScore?: Prisma.FloatFieldUpdateOperationsInput | number
  completedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutQuizAttemptsNestedInput
  quiz?: Prisma.QuizUpdateOneRequiredWithoutAttemptsNestedInput
}

export type QuizAttemptUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  totalScore?: Prisma.FloatFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  quizId?: Prisma.IntFieldUpdateOperationsInput | number
  completedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type QuizAttemptCreateManyInput = {
  id?: number
  score: number
  totalScore?: number
  userId: number
  quizId: number
  completedAt?: Date | string
}

export type QuizAttemptUpdateManyMutationInput = {
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  totalScore?: Prisma.FloatFieldUpdateOperationsInput | number
  completedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type QuizAttemptUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  totalScore?: Prisma.FloatFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  quizId?: Prisma.IntFieldUpdateOperationsInput | number
  completedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type QuizAttemptListRelationFilter = {
  every?: Prisma.QuizAttemptWhereInput
  some?: Prisma.QuizAttemptWhereInput
  none?: Prisma.QuizAttemptWhereInput
}

export type QuizAttemptOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type QuizAttemptUserIdQuizIdCompletedAtCompoundUniqueInput = {
  userId: number
  quizId: number
  completedAt: Date | string
}

export type QuizAttemptCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  score?: Prisma.SortOrder
  totalScore?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
}

export type QuizAttemptAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  score?: Prisma.SortOrder
  totalScore?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
}

export type QuizAttemptMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  score?: Prisma.SortOrder
  totalScore?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
}

export type QuizAttemptMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  score?: Prisma.SortOrder
  totalScore?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
}

export type QuizAttemptSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  score?: Prisma.SortOrder
  totalScore?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  quizId?: Prisma.SortOrder
}

export type QuizAttemptCreateNestedManyWithoutQuizInput = {
  create?: Prisma.XOR<Prisma.QuizAttemptCreateWithoutQuizInput, Prisma.QuizAttemptUncheckedCreateWithoutQuizInput> | Prisma.QuizAttemptCreateWithoutQuizInput[] | Prisma.QuizAttemptUncheckedCreateWithoutQuizInput[]
  connectOrCreate?: Prisma.QuizAttemptCreateOrConnectWithoutQuizInput | Prisma.QuizAttemptCreateOrConnectWithoutQuizInput[]
  createMany?: Prisma.QuizAttemptCreateManyQuizInputEnvelope
  connect?: Prisma.QuizAttemptWhereUniqueInput | Prisma.QuizAttemptWhereUniqueInput[]
}

export type QuizAttemptUncheckedCreateNestedManyWithoutQuizInput = {
  create?: Prisma.XOR<Prisma.QuizAttemptCreateWithoutQuizInput, Prisma.QuizAttemptUncheckedCreateWithoutQuizInput> | Prisma.QuizAttemptCreateWithoutQuizInput[] | Prisma.QuizAttemptUncheckedCreateWithoutQuizInput[]
  connectOrCreate?: Prisma.QuizAttemptCreateOrConnectWithoutQuizInput | Prisma.QuizAttemptCreateOrConnectWithoutQuizInput[]
  createMany?: Prisma.QuizAttemptCreateManyQuizInputEnvelope
  connect?: Prisma.QuizAttemptWhereUniqueInput | Prisma.QuizAttemptWhereUniqueInput[]
}

export type QuizAttemptUpdateManyWithoutQuizNestedInput = {
  create?: Prisma.XOR<Prisma.QuizAttemptCreateWithoutQuizInput, Prisma.QuizAttemptUncheckedCreateWithoutQuizInput> | Prisma.QuizAttemptCreateWithoutQuizInput[] | Prisma.QuizAttemptUncheckedCreateWithoutQuizInput[]
  connectOrCreate?: Prisma.QuizAttemptCreateOrConnectWithoutQuizInput | Prisma.QuizAttemptCreateOrConnectWithoutQuizInput[]
  upsert?: Prisma.QuizAttemptUpsertWithWhereUniqueWithoutQuizInput | Prisma.QuizAttemptUpsertWithWhereUniqueWithoutQuizInput[]
  createMany?: Prisma.QuizAttemptCreateManyQuizInputEnvelope
  set?: Prisma.QuizAttemptWhereUniqueInput | Prisma.QuizAttemptWhereUniqueInput[]
  disconnect?: Prisma.QuizAttemptWhereUniqueInput | Prisma.QuizAttemptWhereUniqueInput[]
  delete?: Prisma.QuizAttemptWhereUniqueInput | Prisma.QuizAttemptWhereUniqueInput[]
  connect?: Prisma.QuizAttemptWhereUniqueInput | Prisma.QuizAttemptWhereUniqueInput[]
  update?: Prisma.QuizAttemptUpdateWithWhereUniqueWithoutQuizInput | Prisma.QuizAttemptUpdateWithWhereUniqueWithoutQuizInput[]
  updateMany?: Prisma.QuizAttemptUpdateManyWithWhereWithoutQuizInput | Prisma.QuizAttemptUpdateManyWithWhereWithoutQuizInput[]
  deleteMany?: Prisma.QuizAttemptScalarWhereInput | Prisma.QuizAttemptScalarWhereInput[]
}

export type QuizAttemptUncheckedUpdateManyWithoutQuizNestedInput = {
  create?: Prisma.XOR<Prisma.QuizAttemptCreateWithoutQuizInput, Prisma.QuizAttemptUncheckedCreateWithoutQuizInput> | Prisma.QuizAttemptCreateWithoutQuizInput[] | Prisma.QuizAttemptUncheckedCreateWithoutQuizInput[]
  connectOrCreate?: Prisma.QuizAttemptCreateOrConnectWithoutQuizInput | Prisma.QuizAttemptCreateOrConnectWithoutQuizInput[]
  upsert?: Prisma.QuizAttemptUpsertWithWhereUniqueWithoutQuizInput | Prisma.QuizAttemptUpsertWithWhereUniqueWithoutQuizInput[]
  createMany?: Prisma.QuizAttemptCreateManyQuizInputEnvelope
  set?: Prisma.QuizAttemptWhereUniqueInput | Prisma.QuizAttemptWhereUniqueInput[]
  disconnect?: Prisma.QuizAttemptWhereUniqueInput | Prisma.QuizAttemptWhereUniqueInput[]
  delete?: Prisma.QuizAttemptWhereUniqueInput | Prisma.QuizAttemptWhereUniqueInput[]
  connect?: Prisma.QuizAttemptWhereUniqueInput | Prisma.QuizAttemptWhereUniqueInput[]
  update?: Prisma.QuizAttemptUpdateWithWhereUniqueWithoutQuizInput | Prisma.QuizAttemptUpdateWithWhereUniqueWithoutQuizInput[]
  updateMany?: Prisma.QuizAttemptUpdateManyWithWhereWithoutQuizInput | Prisma.QuizAttemptUpdateManyWithWhereWithoutQuizInput[]
  deleteMany?: Prisma.QuizAttemptScalarWhereInput | Prisma.QuizAttemptScalarWhereInput[]
}

export type QuizAttemptCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.QuizAttemptCreateWithoutUserInput, Prisma.QuizAttemptUncheckedCreateWithoutUserInput> | Prisma.QuizAttemptCreateWithoutUserInput[] | Prisma.QuizAttemptUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.QuizAttemptCreateOrConnectWithoutUserInput | Prisma.QuizAttemptCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.QuizAttemptCreateManyUserInputEnvelope
  connect?: Prisma.QuizAttemptWhereUniqueInput | Prisma.QuizAttemptWhereUniqueInput[]
}

export type QuizAttemptUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.QuizAttemptCreateWithoutUserInput, Prisma.QuizAttemptUncheckedCreateWithoutUserInput> | Prisma.QuizAttemptCreateWithoutUserInput[] | Prisma.QuizAttemptUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.QuizAttemptCreateOrConnectWithoutUserInput | Prisma.QuizAttemptCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.QuizAttemptCreateManyUserInputEnvelope
  connect?: Prisma.QuizAttemptWhereUniqueInput | Prisma.QuizAttemptWhereUniqueInput[]
}

export type QuizAttemptUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.QuizAttemptCreateWithoutUserInput, Prisma.QuizAttemptUncheckedCreateWithoutUserInput> | Prisma.QuizAttemptCreateWithoutUserInput[] | Prisma.QuizAttemptUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.QuizAttemptCreateOrConnectWithoutUserInput | Prisma.QuizAttemptCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.QuizAttemptUpsertWithWhereUniqueWithoutUserInput | Prisma.QuizAttemptUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.QuizAttemptCreateManyUserInputEnvelope
  set?: Prisma.QuizAttemptWhereUniqueInput | Prisma.QuizAttemptWhereUniqueInput[]
  disconnect?: Prisma.QuizAttemptWhereUniqueInput | Prisma.QuizAttemptWhereUniqueInput[]
  delete?: Prisma.QuizAttemptWhereUniqueInput | Prisma.QuizAttemptWhereUniqueInput[]
  connect?: Prisma.QuizAttemptWhereUniqueInput | Prisma.QuizAttemptWhereUniqueInput[]
  update?: Prisma.QuizAttemptUpdateWithWhereUniqueWithoutUserInput | Prisma.QuizAttemptUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.QuizAttemptUpdateManyWithWhereWithoutUserInput | Prisma.QuizAttemptUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.QuizAttemptScalarWhereInput | Prisma.QuizAttemptScalarWhereInput[]
}

export type QuizAttemptUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.QuizAttemptCreateWithoutUserInput, Prisma.QuizAttemptUncheckedCreateWithoutUserInput> | Prisma.QuizAttemptCreateWithoutUserInput[] | Prisma.QuizAttemptUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.QuizAttemptCreateOrConnectWithoutUserInput | Prisma.QuizAttemptCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.QuizAttemptUpsertWithWhereUniqueWithoutUserInput | Prisma.QuizAttemptUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.QuizAttemptCreateManyUserInputEnvelope
  set?: Prisma.QuizAttemptWhereUniqueInput | Prisma.QuizAttemptWhereUniqueInput[]
  disconnect?: Prisma.QuizAttemptWhereUniqueInput | Prisma.QuizAttemptWhereUniqueInput[]
  delete?: Prisma.QuizAttemptWhereUniqueInput | Prisma.QuizAttemptWhereUniqueInput[]
  connect?: Prisma.QuizAttemptWhereUniqueInput | Prisma.QuizAttemptWhereUniqueInput[]
  update?: Prisma.QuizAttemptUpdateWithWhereUniqueWithoutUserInput | Prisma.QuizAttemptUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.QuizAttemptUpdateManyWithWhereWithoutUserInput | Prisma.QuizAttemptUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.QuizAttemptScalarWhereInput | Prisma.QuizAttemptScalarWhereInput[]
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type QuizAttemptCreateWithoutQuizInput = {
  score: number
  totalScore?: number
  completedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutQuizAttemptsInput
}

export type QuizAttemptUncheckedCreateWithoutQuizInput = {
  id?: number
  score: number
  totalScore?: number
  userId: number
  completedAt?: Date | string
}

export type QuizAttemptCreateOrConnectWithoutQuizInput = {
  where: Prisma.QuizAttemptWhereUniqueInput
  create: Prisma.XOR<Prisma.QuizAttemptCreateWithoutQuizInput, Prisma.QuizAttemptUncheckedCreateWithoutQuizInput>
}

export type QuizAttemptCreateManyQuizInputEnvelope = {
  data: Prisma.QuizAttemptCreateManyQuizInput | Prisma.QuizAttemptCreateManyQuizInput[]
  skipDuplicates?: boolean
}

export type QuizAttemptUpsertWithWhereUniqueWithoutQuizInput = {
  where: Prisma.QuizAttemptWhereUniqueInput
  update: Prisma.XOR<Prisma.QuizAttemptUpdateWithoutQuizInput, Prisma.QuizAttemptUncheckedUpdateWithoutQuizInput>
  create: Prisma.XOR<Prisma.QuizAttemptCreateWithoutQuizInput, Prisma.QuizAttemptUncheckedCreateWithoutQuizInput>
}

export type QuizAttemptUpdateWithWhereUniqueWithoutQuizInput = {
  where: Prisma.QuizAttemptWhereUniqueInput
  data: Prisma.XOR<Prisma.QuizAttemptUpdateWithoutQuizInput, Prisma.QuizAttemptUncheckedUpdateWithoutQuizInput>
}

export type QuizAttemptUpdateManyWithWhereWithoutQuizInput = {
  where: Prisma.QuizAttemptScalarWhereInput
  data: Prisma.XOR<Prisma.QuizAttemptUpdateManyMutationInput, Prisma.QuizAttemptUncheckedUpdateManyWithoutQuizInput>
}

export type QuizAttemptScalarWhereInput = {
  AND?: Prisma.QuizAttemptScalarWhereInput | Prisma.QuizAttemptScalarWhereInput[]
  OR?: Prisma.QuizAttemptScalarWhereInput[]
  NOT?: Prisma.QuizAttemptScalarWhereInput | Prisma.QuizAttemptScalarWhereInput[]
  id?: Prisma.IntFilter<"QuizAttempt"> | number
  score?: Prisma.FloatFilter<"QuizAttempt"> | number
  totalScore?: Prisma.FloatFilter<"QuizAttempt"> | number
  userId?: Prisma.IntFilter<"QuizAttempt"> | number
  quizId?: Prisma.IntFilter<"QuizAttempt"> | number
  completedAt?: Prisma.DateTimeFilter<"QuizAttempt"> | Date | string
}

export type QuizAttemptCreateWithoutUserInput = {
  score: number
  totalScore?: number
  completedAt?: Date | string
  quiz: Prisma.QuizCreateNestedOneWithoutAttemptsInput
}

export type QuizAttemptUncheckedCreateWithoutUserInput = {
  id?: number
  score: number
  totalScore?: number
  quizId: number
  completedAt?: Date | string
}

export type QuizAttemptCreateOrConnectWithoutUserInput = {
  where: Prisma.QuizAttemptWhereUniqueInput
  create: Prisma.XOR<Prisma.QuizAttemptCreateWithoutUserInput, Prisma.QuizAttemptUncheckedCreateWithoutUserInput>
}

export type QuizAttemptCreateManyUserInputEnvelope = {
  data: Prisma.QuizAttemptCreateManyUserInput | Prisma.QuizAttemptCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type QuizAttemptUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.QuizAttemptWhereUniqueInput
  update: Prisma.XOR<Prisma.QuizAttemptUpdateWithoutUserInput, Prisma.QuizAttemptUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.QuizAttemptCreateWithoutUserInput, Prisma.QuizAttemptUncheckedCreateWithoutUserInput>
}

export type QuizAttemptUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.QuizAttemptWhereUniqueInput
  data: Prisma.XOR<Prisma.QuizAttemptUpdateWithoutUserInput, Prisma.QuizAttemptUncheckedUpdateWithoutUserInput>
}

export type QuizAttemptUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.QuizAttemptScalarWhereInput
  data: Prisma.XOR<Prisma.QuizAttemptUpdateManyMutationInput, Prisma.QuizAttemptUncheckedUpdateManyWithoutUserInput>
}

export type QuizAttemptCreateManyQuizInput = {
  id?: number
  score: number
  totalScore?: number
  userId: number
  completedAt?: Date | string
}

export type QuizAttemptUpdateWithoutQuizInput = {
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  totalScore?: Prisma.FloatFieldUpdateOperationsInput | number
  completedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutQuizAttemptsNestedInput
}

export type QuizAttemptUncheckedUpdateWithoutQuizInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  totalScore?: Prisma.FloatFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  completedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type QuizAttemptUncheckedUpdateManyWithoutQuizInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  totalScore?: Prisma.FloatFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  completedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type QuizAttemptCreateManyUserInput = {
  id?: number
  score: number
  totalScore?: number
  quizId: number
  completedAt?: Date | string
}

export type QuizAttemptUpdateWithoutUserInput = {
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  totalScore?: Prisma.FloatFieldUpdateOperationsInput | number
  completedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  quiz?: Prisma.QuizUpdateOneRequiredWithoutAttemptsNestedInput
}

export type QuizAttemptUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  totalScore?: Prisma.FloatFieldUpdateOperationsInput | number
  quizId?: Prisma.IntFieldUpdateOperationsInput | number
  completedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type QuizAttemptUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  score?: Prisma.FloatFieldUpdateOperationsInput | number
  totalScore?: Prisma.FloatFieldUpdateOperationsInput | number
  quizId?: Prisma.IntFieldUpdateOperationsInput | number
  completedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type QuizAttemptSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  score?: boolean
  totalScore?: boolean
  userId?: boolean
  quizId?: boolean
  completedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  quiz?: boolean | Prisma.QuizDefaultArgs<ExtArgs>
}, ExtArgs["result"]["quizAttempt"]>

export type QuizAttemptSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  score?: boolean
  totalScore?: boolean
  userId?: boolean
  quizId?: boolean
  completedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  quiz?: boolean | Prisma.QuizDefaultArgs<ExtArgs>
}, ExtArgs["result"]["quizAttempt"]>

export type QuizAttemptSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  score?: boolean
  totalScore?: boolean
  userId?: boolean
  quizId?: boolean
  completedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  quiz?: boolean | Prisma.QuizDefaultArgs<ExtArgs>
}, ExtArgs["result"]["quizAttempt"]>

export type QuizAttemptSelectScalar = {
  id?: boolean
  score?: boolean
  totalScore?: boolean
  userId?: boolean
  quizId?: boolean
  completedAt?: boolean
}

export type QuizAttemptOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "score" | "totalScore" | "userId" | "quizId" | "completedAt", ExtArgs["result"]["quizAttempt"]>
export type QuizAttemptInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  quiz?: boolean | Prisma.QuizDefaultArgs<ExtArgs>
}
export type QuizAttemptIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  quiz?: boolean | Prisma.QuizDefaultArgs<ExtArgs>
}
export type QuizAttemptIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  quiz?: boolean | Prisma.QuizDefaultArgs<ExtArgs>
}

export type $QuizAttemptPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "QuizAttempt"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    quiz: Prisma.$QuizPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    score: number
    totalScore: number
    userId: number
    quizId: number
    completedAt: Date
  }, ExtArgs["result"]["quizAttempt"]>
  composites: {}
}

export type QuizAttemptGetPayload<S extends boolean | null | undefined | QuizAttemptDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$QuizAttemptPayload, S>

export type QuizAttemptCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<QuizAttemptFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: QuizAttemptCountAggregateInputType | true
  }

export interface QuizAttemptDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuizAttempt'], meta: { name: 'QuizAttempt' } }
  /**
   * Find zero or one QuizAttempt that matches the filter.
   * @param {QuizAttemptFindUniqueArgs} args - Arguments to find a QuizAttempt
   * @example
   * // Get one QuizAttempt
   * const quizAttempt = await prisma.quizAttempt.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends QuizAttemptFindUniqueArgs>(args: Prisma.SelectSubset<T, QuizAttemptFindUniqueArgs<ExtArgs>>): Prisma.Prisma__QuizAttemptClient<runtime.Types.Result.GetResult<Prisma.$QuizAttemptPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one QuizAttempt that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {QuizAttemptFindUniqueOrThrowArgs} args - Arguments to find a QuizAttempt
   * @example
   * // Get one QuizAttempt
   * const quizAttempt = await prisma.quizAttempt.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends QuizAttemptFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, QuizAttemptFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__QuizAttemptClient<runtime.Types.Result.GetResult<Prisma.$QuizAttemptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first QuizAttempt that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuizAttemptFindFirstArgs} args - Arguments to find a QuizAttempt
   * @example
   * // Get one QuizAttempt
   * const quizAttempt = await prisma.quizAttempt.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends QuizAttemptFindFirstArgs>(args?: Prisma.SelectSubset<T, QuizAttemptFindFirstArgs<ExtArgs>>): Prisma.Prisma__QuizAttemptClient<runtime.Types.Result.GetResult<Prisma.$QuizAttemptPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first QuizAttempt that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuizAttemptFindFirstOrThrowArgs} args - Arguments to find a QuizAttempt
   * @example
   * // Get one QuizAttempt
   * const quizAttempt = await prisma.quizAttempt.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends QuizAttemptFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, QuizAttemptFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__QuizAttemptClient<runtime.Types.Result.GetResult<Prisma.$QuizAttemptPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more QuizAttempts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuizAttemptFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all QuizAttempts
   * const quizAttempts = await prisma.quizAttempt.findMany()
   * 
   * // Get first 10 QuizAttempts
   * const quizAttempts = await prisma.quizAttempt.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const quizAttemptWithIdOnly = await prisma.quizAttempt.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends QuizAttemptFindManyArgs>(args?: Prisma.SelectSubset<T, QuizAttemptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$QuizAttemptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a QuizAttempt.
   * @param {QuizAttemptCreateArgs} args - Arguments to create a QuizAttempt.
   * @example
   * // Create one QuizAttempt
   * const QuizAttempt = await prisma.quizAttempt.create({
   *   data: {
   *     // ... data to create a QuizAttempt
   *   }
   * })
   * 
   */
  create<T extends QuizAttemptCreateArgs>(args: Prisma.SelectSubset<T, QuizAttemptCreateArgs<ExtArgs>>): Prisma.Prisma__QuizAttemptClient<runtime.Types.Result.GetResult<Prisma.$QuizAttemptPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many QuizAttempts.
   * @param {QuizAttemptCreateManyArgs} args - Arguments to create many QuizAttempts.
   * @example
   * // Create many QuizAttempts
   * const quizAttempt = await prisma.quizAttempt.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends QuizAttemptCreateManyArgs>(args?: Prisma.SelectSubset<T, QuizAttemptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many QuizAttempts and returns the data saved in the database.
   * @param {QuizAttemptCreateManyAndReturnArgs} args - Arguments to create many QuizAttempts.
   * @example
   * // Create many QuizAttempts
   * const quizAttempt = await prisma.quizAttempt.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many QuizAttempts and only return the `id`
   * const quizAttemptWithIdOnly = await prisma.quizAttempt.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends QuizAttemptCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, QuizAttemptCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$QuizAttemptPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a QuizAttempt.
   * @param {QuizAttemptDeleteArgs} args - Arguments to delete one QuizAttempt.
   * @example
   * // Delete one QuizAttempt
   * const QuizAttempt = await prisma.quizAttempt.delete({
   *   where: {
   *     // ... filter to delete one QuizAttempt
   *   }
   * })
   * 
   */
  delete<T extends QuizAttemptDeleteArgs>(args: Prisma.SelectSubset<T, QuizAttemptDeleteArgs<ExtArgs>>): Prisma.Prisma__QuizAttemptClient<runtime.Types.Result.GetResult<Prisma.$QuizAttemptPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one QuizAttempt.
   * @param {QuizAttemptUpdateArgs} args - Arguments to update one QuizAttempt.
   * @example
   * // Update one QuizAttempt
   * const quizAttempt = await prisma.quizAttempt.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends QuizAttemptUpdateArgs>(args: Prisma.SelectSubset<T, QuizAttemptUpdateArgs<ExtArgs>>): Prisma.Prisma__QuizAttemptClient<runtime.Types.Result.GetResult<Prisma.$QuizAttemptPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more QuizAttempts.
   * @param {QuizAttemptDeleteManyArgs} args - Arguments to filter QuizAttempts to delete.
   * @example
   * // Delete a few QuizAttempts
   * const { count } = await prisma.quizAttempt.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends QuizAttemptDeleteManyArgs>(args?: Prisma.SelectSubset<T, QuizAttemptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more QuizAttempts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuizAttemptUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many QuizAttempts
   * const quizAttempt = await prisma.quizAttempt.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends QuizAttemptUpdateManyArgs>(args: Prisma.SelectSubset<T, QuizAttemptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more QuizAttempts and returns the data updated in the database.
   * @param {QuizAttemptUpdateManyAndReturnArgs} args - Arguments to update many QuizAttempts.
   * @example
   * // Update many QuizAttempts
   * const quizAttempt = await prisma.quizAttempt.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more QuizAttempts and only return the `id`
   * const quizAttemptWithIdOnly = await prisma.quizAttempt.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends QuizAttemptUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, QuizAttemptUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$QuizAttemptPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one QuizAttempt.
   * @param {QuizAttemptUpsertArgs} args - Arguments to update or create a QuizAttempt.
   * @example
   * // Update or create a QuizAttempt
   * const quizAttempt = await prisma.quizAttempt.upsert({
   *   create: {
   *     // ... data to create a QuizAttempt
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the QuizAttempt we want to update
   *   }
   * })
   */
  upsert<T extends QuizAttemptUpsertArgs>(args: Prisma.SelectSubset<T, QuizAttemptUpsertArgs<ExtArgs>>): Prisma.Prisma__QuizAttemptClient<runtime.Types.Result.GetResult<Prisma.$QuizAttemptPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of QuizAttempts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuizAttemptCountArgs} args - Arguments to filter QuizAttempts to count.
   * @example
   * // Count the number of QuizAttempts
   * const count = await prisma.quizAttempt.count({
   *   where: {
   *     // ... the filter for the QuizAttempts we want to count
   *   }
   * })
  **/
  count<T extends QuizAttemptCountArgs>(
    args?: Prisma.Subset<T, QuizAttemptCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], QuizAttemptCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a QuizAttempt.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuizAttemptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends QuizAttemptAggregateArgs>(args: Prisma.Subset<T, QuizAttemptAggregateArgs>): Prisma.PrismaPromise<GetQuizAttemptAggregateType<T>>

  /**
   * Group by QuizAttempt.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuizAttemptGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends QuizAttemptGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: QuizAttemptGroupByArgs['orderBy'] }
      : { orderBy?: QuizAttemptGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, QuizAttemptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuizAttemptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the QuizAttempt model
 */
readonly fields: QuizAttemptFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for QuizAttempt.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__QuizAttemptClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  quiz<T extends Prisma.QuizDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.QuizDefaultArgs<ExtArgs>>): Prisma.Prisma__QuizClient<runtime.Types.Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the QuizAttempt model
 */
export interface QuizAttemptFieldRefs {
  readonly id: Prisma.FieldRef<"QuizAttempt", 'Int'>
  readonly score: Prisma.FieldRef<"QuizAttempt", 'Float'>
  readonly totalScore: Prisma.FieldRef<"QuizAttempt", 'Float'>
  readonly userId: Prisma.FieldRef<"QuizAttempt", 'Int'>
  readonly quizId: Prisma.FieldRef<"QuizAttempt", 'Int'>
  readonly completedAt: Prisma.FieldRef<"QuizAttempt", 'DateTime'>
}
    

// Custom InputTypes
/**
 * QuizAttempt findUnique
 */
export type QuizAttemptFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuizAttempt
   */
  select?: Prisma.QuizAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QuizAttempt
   */
  omit?: Prisma.QuizAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizAttemptInclude<ExtArgs> | null
  /**
   * Filter, which QuizAttempt to fetch.
   */
  where: Prisma.QuizAttemptWhereUniqueInput
}

/**
 * QuizAttempt findUniqueOrThrow
 */
export type QuizAttemptFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuizAttempt
   */
  select?: Prisma.QuizAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QuizAttempt
   */
  omit?: Prisma.QuizAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizAttemptInclude<ExtArgs> | null
  /**
   * Filter, which QuizAttempt to fetch.
   */
  where: Prisma.QuizAttemptWhereUniqueInput
}

/**
 * QuizAttempt findFirst
 */
export type QuizAttemptFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuizAttempt
   */
  select?: Prisma.QuizAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QuizAttempt
   */
  omit?: Prisma.QuizAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizAttemptInclude<ExtArgs> | null
  /**
   * Filter, which QuizAttempt to fetch.
   */
  where?: Prisma.QuizAttemptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of QuizAttempts to fetch.
   */
  orderBy?: Prisma.QuizAttemptOrderByWithRelationInput | Prisma.QuizAttemptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for QuizAttempts.
   */
  cursor?: Prisma.QuizAttemptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` QuizAttempts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` QuizAttempts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of QuizAttempts.
   */
  distinct?: Prisma.QuizAttemptScalarFieldEnum | Prisma.QuizAttemptScalarFieldEnum[]
}

/**
 * QuizAttempt findFirstOrThrow
 */
export type QuizAttemptFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuizAttempt
   */
  select?: Prisma.QuizAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QuizAttempt
   */
  omit?: Prisma.QuizAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizAttemptInclude<ExtArgs> | null
  /**
   * Filter, which QuizAttempt to fetch.
   */
  where?: Prisma.QuizAttemptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of QuizAttempts to fetch.
   */
  orderBy?: Prisma.QuizAttemptOrderByWithRelationInput | Prisma.QuizAttemptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for QuizAttempts.
   */
  cursor?: Prisma.QuizAttemptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` QuizAttempts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` QuizAttempts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of QuizAttempts.
   */
  distinct?: Prisma.QuizAttemptScalarFieldEnum | Prisma.QuizAttemptScalarFieldEnum[]
}

/**
 * QuizAttempt findMany
 */
export type QuizAttemptFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuizAttempt
   */
  select?: Prisma.QuizAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QuizAttempt
   */
  omit?: Prisma.QuizAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizAttemptInclude<ExtArgs> | null
  /**
   * Filter, which QuizAttempts to fetch.
   */
  where?: Prisma.QuizAttemptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of QuizAttempts to fetch.
   */
  orderBy?: Prisma.QuizAttemptOrderByWithRelationInput | Prisma.QuizAttemptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing QuizAttempts.
   */
  cursor?: Prisma.QuizAttemptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` QuizAttempts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` QuizAttempts.
   */
  skip?: number
  distinct?: Prisma.QuizAttemptScalarFieldEnum | Prisma.QuizAttemptScalarFieldEnum[]
}

/**
 * QuizAttempt create
 */
export type QuizAttemptCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuizAttempt
   */
  select?: Prisma.QuizAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QuizAttempt
   */
  omit?: Prisma.QuizAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizAttemptInclude<ExtArgs> | null
  /**
   * The data needed to create a QuizAttempt.
   */
  data: Prisma.XOR<Prisma.QuizAttemptCreateInput, Prisma.QuizAttemptUncheckedCreateInput>
}

/**
 * QuizAttempt createMany
 */
export type QuizAttemptCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many QuizAttempts.
   */
  data: Prisma.QuizAttemptCreateManyInput | Prisma.QuizAttemptCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * QuizAttempt createManyAndReturn
 */
export type QuizAttemptCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuizAttempt
   */
  select?: Prisma.QuizAttemptSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the QuizAttempt
   */
  omit?: Prisma.QuizAttemptOmit<ExtArgs> | null
  /**
   * The data used to create many QuizAttempts.
   */
  data: Prisma.QuizAttemptCreateManyInput | Prisma.QuizAttemptCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizAttemptIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * QuizAttempt update
 */
export type QuizAttemptUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuizAttempt
   */
  select?: Prisma.QuizAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QuizAttempt
   */
  omit?: Prisma.QuizAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizAttemptInclude<ExtArgs> | null
  /**
   * The data needed to update a QuizAttempt.
   */
  data: Prisma.XOR<Prisma.QuizAttemptUpdateInput, Prisma.QuizAttemptUncheckedUpdateInput>
  /**
   * Choose, which QuizAttempt to update.
   */
  where: Prisma.QuizAttemptWhereUniqueInput
}

/**
 * QuizAttempt updateMany
 */
export type QuizAttemptUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update QuizAttempts.
   */
  data: Prisma.XOR<Prisma.QuizAttemptUpdateManyMutationInput, Prisma.QuizAttemptUncheckedUpdateManyInput>
  /**
   * Filter which QuizAttempts to update
   */
  where?: Prisma.QuizAttemptWhereInput
  /**
   * Limit how many QuizAttempts to update.
   */
  limit?: number
}

/**
 * QuizAttempt updateManyAndReturn
 */
export type QuizAttemptUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuizAttempt
   */
  select?: Prisma.QuizAttemptSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the QuizAttempt
   */
  omit?: Prisma.QuizAttemptOmit<ExtArgs> | null
  /**
   * The data used to update QuizAttempts.
   */
  data: Prisma.XOR<Prisma.QuizAttemptUpdateManyMutationInput, Prisma.QuizAttemptUncheckedUpdateManyInput>
  /**
   * Filter which QuizAttempts to update
   */
  where?: Prisma.QuizAttemptWhereInput
  /**
   * Limit how many QuizAttempts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizAttemptIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * QuizAttempt upsert
 */
export type QuizAttemptUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuizAttempt
   */
  select?: Prisma.QuizAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QuizAttempt
   */
  omit?: Prisma.QuizAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizAttemptInclude<ExtArgs> | null
  /**
   * The filter to search for the QuizAttempt to update in case it exists.
   */
  where: Prisma.QuizAttemptWhereUniqueInput
  /**
   * In case the QuizAttempt found by the `where` argument doesn't exist, create a new QuizAttempt with this data.
   */
  create: Prisma.XOR<Prisma.QuizAttemptCreateInput, Prisma.QuizAttemptUncheckedCreateInput>
  /**
   * In case the QuizAttempt was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.QuizAttemptUpdateInput, Prisma.QuizAttemptUncheckedUpdateInput>
}

/**
 * QuizAttempt delete
 */
export type QuizAttemptDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuizAttempt
   */
  select?: Prisma.QuizAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QuizAttempt
   */
  omit?: Prisma.QuizAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizAttemptInclude<ExtArgs> | null
  /**
   * Filter which QuizAttempt to delete.
   */
  where: Prisma.QuizAttemptWhereUniqueInput
}

/**
 * QuizAttempt deleteMany
 */
export type QuizAttemptDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which QuizAttempts to delete
   */
  where?: Prisma.QuizAttemptWhereInput
  /**
   * Limit how many QuizAttempts to delete.
   */
  limit?: number
}

/**
 * QuizAttempt without action
 */
export type QuizAttemptDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuizAttempt
   */
  select?: Prisma.QuizAttemptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QuizAttempt
   */
  omit?: Prisma.QuizAttemptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuizAttemptInclude<ExtArgs> | null
}
